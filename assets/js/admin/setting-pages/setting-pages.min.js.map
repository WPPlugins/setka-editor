{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/admin/setting-pages/main.js","assets/js/admin/setting-pages/model/Fragment.js","assets/js/admin/setting-pages/view/Fragment.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","setkaEditorSettingPages","window","model","Fragment","collection","view","Backbone","Model","extend","initialize","this","has","names","getNamesRecursive","set","join","getID","get","push","getFragmentRole","options","_","isUndefined","attr","adapter","$","jQuery","View","fragments","configSelector","json","$el","find","val","JSON","parse","isEmpty","each","initializeSubFragment","unset","bindAll","addEvents","trigger","fragment","parent","selector","$fragment","el","role","click","onSelectNewCondition","on","onConditionChanged","afterInit","event","contains","target","value","show","hide","element"],"mappings":"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","file":"setting-pages.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global jQuery, Backbone */\n\nvar setkaEditorSettingPages = {};\n\n// Store everything globally\nwindow.setkaEditorSettingPages = setkaEditorSettingPages;\n\nsetkaEditorSettingPages.model = {\n    Fragment: require('./model/Fragment')\n};\n\nsetkaEditorSettingPages.collection = {\n\n};\n\nsetkaEditorSettingPages.view = {\n    Fragment: require('./view/Fragment')\n};","\nmodule.exports = Backbone.Model.extend({\n\n    initialize: function() {\n        if(!this.has('id')) {\n            var names = this.getNamesRecursive();\n            this.set('id', names.join('_'));\n        }\n    },\n\n    getID: function() {\n        return this.get('id');\n    },\n\n    getNamesRecursive: function() {\n        var names = [];\n        if(this.has('parent')) {\n            names = this.get('parent').getNamesRecursive();\n        }\n        names.push(this.get('name'));\n        return names;\n    },\n\n    getFragmentRole: function() {\n        if(this.has('options')) {\n            var options = this.get('options');\n            if(!_.isUndefined(options.attr['data-form-element-role'])) {\n                return options.attr['data-form-element-role'];\n            }\n        }\n        return false;\n    }\n});\n","var\n    adapter = window.setkaEditorSettingPages,\n    $ = jQuery;\n\nmodule.exports = Backbone.View.extend({\n\n    /**\n     * Nested fragment instances (sections, inputs wrapped into divs).\n     */\n    fragments: {},\n\n    initialize: function() {\n        // If no parent then this is the root element (actually form)\n        if(!this.model.has('parent')) {\n            // Try to find form config\n            var configSelector = '#' + this.model.get('name') + '_config';\n            var json = this.$el.find(configSelector).val();\n            // And parse this config from JSON string\n            try {\n                var fragments = JSON.parse(json);\n                this.model.set('fragments', fragments);\n            } catch(e) {\n                return;\n            } finally {\n                delete(json);\n                delete(fragments);\n            }\n        }\n\n        // After preparing config search for nested fragments (sections, inputs wrapped into divs)\n        var fragments = this.model.get('fragments');\n        // And setup each fragment\n        if(!_.isEmpty(fragments)) {\n            _.each(fragments, this.initializeSubFragment, this);\n            this.model.unset('fragments');\n        }\n\n        // All events runs in similar context (environment) for accessing to this.model and this.fragments\n        _.bindAll(this, 'onSelectNewCondition', 'onConditionChanged', 'afterInit');\n\n        // Attach events\n        this.addEvents();\n\n        // Kick it!\n        if(!this.model.has('parent')) {\n            // This event for make conditions work after init the form.\n            Backbone.trigger('setka:editor:admin:form:afterInit', this);\n        }\n    },\n\n    initializeSubFragment: function(fragment) {\n        fragment.parent = this.model;\n        var model = new adapter.model.Fragment(fragment);\n\n        var selector = '#' + model.getID();\n\n        if(!_.isUndefined(fragment.options.attr['data-fragment'])) {\n            selector += '_' + fragment.options.attr['data-fragment'];\n        } else {\n            selector += '_wrapper';\n        }\n\n        var $fragment = $(selector);\n\n        if($fragment.length) {\n            this.fragments[model.get('name')] = new adapter.view.Fragment({\n                model: model,\n                el: $(selector)\n            });\n        } else {\n            this.fragments[model.get('name')] = new adapter.view.Fragment({\n                model: model\n            });\n        }\n    },\n\n    addEvents: function() {\n        var role = this.model.getFragmentRole();\n        if(role) {\n            switch(role) {\n                case 'conditional-switcher':\n                    $('#' + this.model.getID()).click(this.onSelectNewCondition);\n                    break;\n\n                case 'conditional-listener':\n                default:\n                    Backbone.on('setka:editor:admin:form:condition:changed', this.onConditionChanged);\n                    break;\n            }\n        }\n        Backbone.on('setka:editor:admin:form:afterInit', this.afterInit);\n    },\n\n    onSelectNewCondition: function(event) {\n        Backbone.trigger('setka:editor:admin:form:condition:changed', event);\n    },\n\n    onConditionChanged: function(event) {\n        var options = this.model.get('options');\n        if(_.contains(options['validation_groups'], event.target.value)) {\n            this.$el.show();\n        } else {\n            this.$el.hide();\n        }\n    },\n\n    afterInit: function() {\n        var role = this.model.getFragmentRole();\n        if(role == 'conditional-switcher') {\n            var element = $('#' + this.model.getID());\n            if(element.attr('checked') == 'checked') {\n                element.click();\n            }\n        }\n    }\n});"]}